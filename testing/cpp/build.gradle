import edu.wpi.first.toolchain.NativePlatforms

plugins {
    id "cpp"
    id "edu.wpi.first.NativeUtils" version "2025.0.0"
    id 'edu.wpi.first.wpilib.repositories.WPILibRepositoriesPlugin' version '2020.2'
}

if (project.hasProperty('releaseMode')) {
  wpilibRepositories.addAllReleaseRepositories(project)
} else {
  wpilibRepositories.addAllDevelopmentRepositories(project)
}

nativeUtils.addWpiNativeUtils()
nativeUtils.withCrossRoboRIO()
// nativeUtils.withCrossLinuxArm32()
// nativeUtils.withCrossLinuxArm64()

nativeUtils.crossCompilers.getByName(NativePlatforms.roborio).optional = false
// nativeUtils.crossCompilers.getByName(NativePlatforms.linuxarm32).optional = false
// nativeUtils.crossCompilers.getByName(NativePlatforms.linuxarm64).optional = false

nativeUtils {
    wpi {
        configureDependencies {
            wpiVersion = "2024.+"
            opencvYear = "frc2024"
            googleTestYear = "frc2024"
            niLibVersion = "2024.2.1"
            opencvVersion = "4.8.0-2"
            googleTestVersion = "1.14.0-1"
        }
    }
}

model {
    components {
        all {
            nativeUtils.useAllPlatforms(it)
        }
    }
    binaries {
        withType(NativeBinarySpec).all {
            nativeUtils.usePlatformArguments(it)
        }
    }
}

nativeUtils {
    exportsConfigs {
        // Main library is just default empty. This will export everything
        TestLib {
        }
    }
}

model {
    components {
        TestLib(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDirs 'src/main/native/lib'
                        include '**/*.cpp'
                    }
                    exportedHeaders {
                        srcDirs 'src/main/native/include'
                    }
                    lib library: 'driver_shared'
                }
            }
        }
        TestExe(NativeExecutableSpec) {
            sources {
                cpp {
                    source {
                        srcDirs 'src/main/native/exe'
                        include '**/*.cpp'
                    }
                    exportedHeaders {
                        srcDirs 'src/main/native/include'
                    }
                }
            }
            binaries.all {
                lib library: 'TestLib', linkage: 'shared'
                lib library: 'wpilib_executable_shared'
            }
        }
    }
}

wrapper {
    gradleVersion = '8.5'
    distributionType = Wrapper.DistributionType.BIN
}
